plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.0'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'jacoco' // Adicionando o plugin JaCoCo
}

group = 'br.com.desafio'
version = '0.0.1-SNAPSHOT'

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/plugins-release" }
}

dependencies {
	implementation 'org.springframework.cloud:spring-cloud-starter-aws-messaging:2.2.6.RELEASE'
	implementation 'org.springframework.boot:spring-boot-starter-web:3.1.0'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.h2database:h2' // Exemplo de banco de dados H2 para testes
	implementation 'jakarta.validation:jakarta.validation-api:3.0.0'
	implementation 'software.amazon.awssdk:sqs:2.20.0' // Inclua a versão correta
	implementation 'software.amazon.awssdk:utils:2.20.0' // Dependência do utilitár

	compileOnly "org.projectlombok:lombok:1.18.28"
	annotationProcessor "org.projectlombok:lombok:1.18.28"
	implementation "org.projectlombok:lombok:1.18.28"

	testImplementation platform('org.junit:junit-bom:5.9.1')
	testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // Gera o relatório de cobertura após os testes
}

jacoco {
	toolVersion = "0.8.7" // Versão do JaCoCo
}

jacocoTestReport {
	reports {
		xml.required = true
		csv.required = false
		html.outputLocation = file("$buildDir/reports/jacoco") // Gera o relatório HTML
	}
}

springBoot {
	mainClass = 'br.com.desafio.SanGiorgioApplication' // classe principal
}
